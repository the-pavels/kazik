services:
  pulsar:
    image: apachepulsar/pulsar:4.0.3
    container_name: fr-local-pulsar
    ports:
      - 8888:8080
      - 6650:6650
    environment:
      PULSAR_MEM: " -Xms512m -Xmx512m -XX:MaxDirectMemorySize=1g"
    command: >
      /bin/bash -c "bin/apply-config-from-env.py conf/standalone.conf && bin/pulsar standalone"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8080/admin/v2/brokers/health"
        ]
      interval: 2s
      timeout: 5s
      retries: 15
      start_period: 2m

  pulsar-init:
    image: docker
    container_name: fr-local-pulsar-init
    privileged: true
    depends_on:
      pulsar:
        condition: service_healthy
    command: >
      /bin/sh -c "echo 'Initializing Pulsar...' &&
      docker exec fr-local-pulsar bin/pulsar-admin tenants create fr > /dev/null 2>&1 || true &&
      echo 'Created fr tenant ' &&
      docker exec fr-local-pulsar bin/pulsar-admin namespaces create fr/sticky > /dev/null 2>&1 || true &&
      echo 'Created fr/sticky ' &&
      docker exec fr-local-pulsar bin/pulsar-admin namespaces create fr/handler > /dev/null 2>&1 || true &&
      echo 'Created fr/handler ' &&
      echo 'Pulsar initialized. Namespaces:' &&
      docker exec fr-local-pulsar bin/pulsar-admin namespaces list fr &&
      tail -F /etc/hosts"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  valkey:
    image: valkey/valkey:8.0.2
    container_name: fr-valkey
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
      - VALKEY_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - '6379:6379'
    volumes:
      - 'valkey_data:/valkey/data'

  postgres:
    image: timescale/timescaledb:2.10.3-pg13
    ports:
      - 5432:5432
    environment:
      - DEBUG=false
      - POSTGRES_SCHEMA=public
      - POSTGRES_USER=fr
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_HOST_AUTH_METHOD=md5
    command: postgres -c max_connections=200
    volumes:
      - ./scala/db/dev/databases.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U fr -d roulette" ]
      interval: 10s
      timeout: 5s
      retries: 5

  flyway-roulette:
    image: flyway/flyway:10.3.0
    command: migrate
    environment:
      - FLYWAY_USER=fr
      - FLYWAY_PASSWORD=mysecretpassword
      - FLYWAY_URL=jdbc:postgresql://postgres:5432/roulette
      - FLYWAY_SCHEMAS=public
      - FLYWAY_GROUP=true
      - FLYWAY_CONNECT_RETRIES=60
    volumes:
      - $PWD/db/roulette/sql:/flyway/sql
    depends_on:
      - postgres

volumes:
  valkey_data:
    driver: local